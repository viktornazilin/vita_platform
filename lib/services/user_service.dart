import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:supabase_flutter/supabase_flutter.dart';

class UserService {
  static final UserService _instance = UserService._internal();
  factory UserService() => _instance;
  UserService._internal();

  final SupabaseClient _client = Supabase.instance.client;

  // ‚ö†Ô∏è –ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ—é —Å—Ö–µ–º—É, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –¥—Ä—É–≥—É—é (—Å–º. AndroidManifest/Info.plist)
  static const String _mobileRedirect = 'vitaplatform://auth-callback';

  Map<String, dynamic>? _currentUserData;
  Map<String, dynamic>? get currentUser => _currentUserData;

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
  Future<void> init() async {
    final user = _client.auth.currentUser;
    if (user != null) {
      await _ensureUserRow(user); // –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º
      _currentUserData = await _client
          .from('users')
          .select()
          .eq('id', user.id)
          .maybeSingle();
    } else {
      _currentUserData = null;
    }
  }

  /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ email/–ø–∞—Ä–æ–ª—é + —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users.
  Future<void> register(String name, String email, String password) async {
    final authRes = await _client.auth.signUp(
      email: email,
      password: password,
      data: {'full_name': name},
    );
    if (authRes.user == null) {
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }

    await _upsertUserRow(
      id: authRes.user!.id,
      email: email,
      name: name,
    );

    _currentUserData = await _client
        .from('users')
        .select()
        .eq('id', authRes.user!.id)
        .maybeSingle();
  }

  /// –í—Ö–æ–¥ –ø–æ email/–ø–∞—Ä–æ–ª—é + –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è.
  Future<bool> login(String email, String password) async {
    final authRes = await _client.auth
        .signInWithPassword(email: email, password: password);

    if (authRes.user != null) {
      await _ensureUserRow(authRes.user!);
      _currentUserData = await _client
          .from('users')
          .select()
          .eq('id', authRes.user!.id)
          .maybeSingle();
      return true;
    }
    return false;
  }

  /// ‚úÖ –í—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google OAuth (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫).
  /// –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –≤–µ—Ä–Ω–µ—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ deep link, —Å–µ—Å—Å–∏—é –ø–æ–¥–Ω–∏–º–µ—Ç Supabase.
  Future<void> signInWithGoogle() async {
    final redirect = kIsWeb ? null : _mobileRedirect;
    await _client.auth.signInWithOAuth(
      OAuthProvider.google,
      redirectTo: redirect,
      queryParams: const {
        'access_type': 'offline', // refresh token
        'prompt': 'consent',
      },
      // –ï—Å–ª–∏ –ø–æ–∑–∂–µ –Ω—É–∂–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Äî –¥–æ–±–∞–≤—å scope:
      // scopes: 'openid profile email https://www.googleapis.com/auth/calendar.readonly',
    );
    // –ü–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Å–ª—É—à–∞–π onAuthStateChange –≤ UI –∏ –¥–µ—Ä–Ω–∏ init() –∏–ª–∏ refreshCurrentUser().
  }

  /// –í—ã—Ö–æ–¥ + –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞.
  Future<void> logout() async {
    await _client.auth.signOut();
    _currentUserData = null;
  }

  bool get hasCompletedQuestionnaire =>
      _currentUserData?['has_completed_questionnaire'] == true;

  Future<void> markQuestionnaireComplete() async {
    final id = _currentUserData?['id'];
    if (id != null) {
      await _client
          .from('users')
          .update({'has_completed_questionnaire': true}).eq('id', id);
      _currentUserData!['has_completed_questionnaire'] = true;
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è.
  Future<void> updateUserDetails(Map<String, dynamic> updates) async {
    final id = _currentUserData?['id'];
    if (id != null) {
      await _client.from('users').update(updates).eq('id', id);
      _currentUserData = {...?_currentUserData, ...updates};
    }
  }

  /// üîÑ –í—ã–∑–æ–≤–∏ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è signedIn, —á—Ç–æ–±—ã –ø–æ–¥—Ç—è–Ω—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.
  Future<void> refreshCurrentUser() async {
    final user = _client.auth.currentUser;
    if (user == null) {
      _currentUserData = null;
      return;
    }
    await _ensureUserRow(user);
    _currentUserData = await _client
        .from('users')
        .select()
        .eq('id', user.id)
        .maybeSingle();
  }

  // -------------------- private helpers --------------------

  /// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ public.users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è auth.users.
  Future<void> _ensureUserRow(User user) async {
    final existing = await _client
        .from('users')
        .select('id')
        .eq('id', user.id)
        .maybeSingle();

    if (existing == null) {
      await _upsertUserRow(
        id: user.id,
        email: user.email,
        name: _extractNameFromMetadata(user),
      );
    }
  }

  Future<void> _upsertUserRow({
    required String id,
    String? email,
    String? name,
  }) async {
    await _client.from('users').upsert({
      'id': id,
      'email': email,
      'name': name,
      'created_at': DateTime.now().toIso8601String(),
    });
  }

  String? _extractNameFromMetadata(User user) {
    // Supabase –∫–ª–∞–¥—ë—Ç –≤ rawUserMetaData –ø–æ–ª—è –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (Google: full_name/name/picture)
    final meta = user.userMetadata ?? {};
    return (meta['full_name'] ?? meta['name'] ?? meta['given_name']) as String?;
  }
}
