import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:shared_preferences/shared_preferences.dart';

class UserService {
  static final UserService _instance = UserService._internal();
  factory UserService() => _instance;
  UserService._internal();

  final SupabaseClient _client = Supabase.instance.client;

  // ‚ö†Ô∏è –ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ—é —Å—Ö–µ–º—É, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –¥—Ä—É–≥—É—é (—Å–º. AndroidManifest/Info.plist)
  static const String _mobileRedirect = 'vitaplatform://auth-callback';

  // –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –≥–æ—Å—Ç–µ–π
  static const _prefSeenIntro = 'vita_seen_intro';
  static const _prefArchetype = 'vita_archetype';

  Map<String, dynamic>? _currentUserData;
  Map<String, dynamic>? get currentUser => _currentUserData;

  // -------- NEW: –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ–ª–∞–≥–∏/–≥–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ñ–ª–æ—É --------
  bool get hasSeenEpicIntro {
    // –µ—Å–ª–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è, –∏–Ω–∞—á–µ ‚Äî –æ–ø–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π pref
    final v = _currentUserData?['has_seen_intro'];
    if (v is bool) return v;
    return _cachedSeenIntro ?? false;
  }

  String? get selectedArchetype {
    final v = _currentUserData?['archetype'];
    if (v is String && v.isNotEmpty) return v;
    return _cachedArchetype;
  }

  bool get hasCompletedQuestionnaire =>
      _currentUserData?['has_completed_questionnaire'] == true;

  // –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –≥–æ—Å—Ç–µ–π
  bool? _cachedSeenIntro;
  String? _cachedArchetype;

  // ==================== –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ====================

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
  /// –ü–ª—é—Å –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–ª—è –≥–æ—Å—Ç–µ–π) –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞.
  Future<void> init() async {
    await _loadLocalGuestPrefs();

    final user = _client.auth.currentUser;
    if (user != null) {
      await _ensureUserRow(user); // –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º
      _currentUserData = await _client
          .from('users')
          .select()
          .eq('id', user.id)
          .maybeSingle();

      // –µ—Å–ª–∏ —É –≥–æ—Å—Ç—è –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–Ω—Ç—Ä–æ/–∞—Ä—Ö–µ—Ç–∏–ø ‚Üí —Å–∏–Ω–∫–Ω–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
      await _syncGuestOnLogin();
      // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ —Å–∏–Ω–∫–∞ (–µ—Å–ª–∏ –±—ã–ª)
      _currentUserData = await _client
          .from('users')
          .select()
          .eq('id', user.id)
          .maybeSingle();
    } else {
      _currentUserData = null;
    }
  }

  /// üîÑ –í—ã–∑–æ–≤–∏ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è signedIn, —á—Ç–æ–±—ã –ø–æ–¥—Ç—è–Ω—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.
  Future<void> refreshCurrentUser() async {
    final user = _client.auth.currentUser;
    if (user == null) {
      _currentUserData = null;
      return;
    }
    await _ensureUserRow(user);
    _currentUserData = await _client
        .from('users')
        .select()
        .eq('id', user.id)
        .maybeSingle();

    await _syncGuestOnLogin();
    _currentUserData = await _client
        .from('users')
        .select()
        .eq('id', user.id)
        .maybeSingle();
  }

  // ==================== –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ====================

  /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ email/–ø–∞—Ä–æ–ª—é + —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users.
  Future<void> register(String name, String email, String password) async {
    final authRes = await _client.auth.signUp(
      email: email,
      password: password,
      data: {'full_name': name},
    );
    if (authRes.user == null) {
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }

    await _upsertUserRow(
      id: authRes.user!.id,
      email: email,
      name: name,
    );

    _currentUserData = await _client
        .from('users')
        .select()
        .eq('id', authRes.user!.id)
        .maybeSingle();

    // —Å–∏–Ω–∫ –≥–æ—Å—Ç–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ –±—ã–ª–∏)
    await _syncGuestOnLogin();
    _currentUserData = await _client
        .from('users')
        .select()
        .eq('id', authRes.user!.id)
        .maybeSingle();
  }

  /// –í—Ö–æ–¥ –ø–æ email/–ø–∞—Ä–æ–ª—é + –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è.
  Future<bool> login(String email, String password) async {
    final authRes = await _client.auth
        .signInWithPassword(email: email, password: password);

    if (authRes.user != null) {
      await _ensureUserRow(authRes.user!);
      _currentUserData = await _client
          .from('users')
          .select()
          .eq('id', authRes.user!.id)
          .maybeSingle();

      await _syncGuestOnLogin();
      _currentUserData = await _client
          .from('users')
          .select()
          .eq('id', authRes.user!.id)
          .maybeSingle();

      return true;
    }
    return false;
  }

  /// ‚úÖ –í—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google OAuth (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫).
  Future<void> signInWithGoogle() async {
    final redirect = kIsWeb ? null : _mobileRedirect;
    await _client.auth.signInWithOAuth(
      OAuthProvider.google,
      redirectTo: redirect,
      queryParams: const {
        'access_type': 'offline',
        'prompt': 'consent',
      },
      // scopes: 'openid profile email https://www.googleapis.com/auth/calendar.readonly',
    );
    // –ü–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Å–ª—É—à–∞–π onAuthStateChange –≤ UI –∏ –¥–µ—Ä–Ω–∏ init() –∏–ª–∏ refreshCurrentUser().
  }

  /// –í—ã—Ö–æ–¥ + –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞.
  Future<void> logout() async {
    await _client.auth.signOut();
    _currentUserData = null;
    // –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –ù–ï –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ prefs ‚Äî —á—Ç–æ–±—ã –≥–æ—Å—Ç—å –Ω–µ –ø–æ—Ç–µ—Ä—è–ª –≤—ã–±–æ—Ä –∞—Ä—Ö–µ—Ç–∏–ø–∞/–∏–Ω—Ç—Ä–æ
  }

  // ==================== –ø—Ä–æ—Ñ–∏–ª—å –∏ –∞—Ç—Ä–∏–±—É—Ç—ã ====================

  Future<void> markQuestionnaireComplete() async {
    final id = _currentUserData?['id'];
    if (id != null) {
      await _client
          .from('users')
          .update({'has_completed_questionnaire': true}).eq('id', id);
      _currentUserData!['has_completed_questionnaire'] = true;
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è.
  Future<void> updateUserDetails(Map<String, dynamic> updates) async {
    final id = _currentUserData?['id'];
    if (id != null) {
      await _client.from('users').update(updates).eq('id', id);
      _currentUserData = {...?_currentUserData, ...updates};
    }
  }

  // -------- NEW: –∏–Ω—Ç—Ä–æ –∏ –∞—Ä—Ö–µ—Ç–∏–ø --------

  /// –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —ç–ø–∏—á–Ω—ã–π –ø—Ä–æ–ª–æ–≥ (–≥–æ—Å—Ç—å –∏–ª–∏ —é–∑–µ—Ä).
  Future<void> markEpicIntroSeen() async {
    // —Å–æ—Ö—Ä–∞–Ω–∏–º –ª–æ–∫–∞–ª—å–Ω–æ
    _cachedSeenIntro = true;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_prefSeenIntro, true);

    // –µ—Å–ª–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî –∞–ø–¥–µ–π—Ç–∏–º –ø—Ä–æ—Ñ–∏–ª—å
    final id = _currentUserData?['id'];
    if (id != null) {
      await _client.from('users').update({'has_seen_intro': true}).eq('id', id);
      _currentUserData = {...?_currentUserData, 'has_seen_intro': true};
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Ä—Ö–µ—Ç–∏–ø (–≥–æ—Å—Ç—å –∏–ª–∏ —é–∑–µ—Ä).
  Future<void> saveArchetype(String key) async {
    _cachedArchetype = key;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_prefArchetype, key);

    final id = _currentUserData?['id'];
    if (id != null) {
      await _client.from('users').update({'archetype': key}).eq('id', id);
      _currentUserData = {...?_currentUserData, 'archetype': key};
    }
  }

  // ==================== private helpers ====================

  /// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ public.users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è auth.users.
  Future<void> _ensureUserRow(User user) async {
    final existing = await _client
        .from('users')
        .select('id')
        .eq('id', user.id)
        .maybeSingle();

    if (existing == null) {
      await _upsertUserRow(
        id: user.id,
        email: user.email,
        name: _extractNameFromMetadata(user),
      );
    }
  }

  Future<void> _upsertUserRow({
    required String id,
    String? email,
    String? name,
  }) async {
    await _client.from('users').upsert({
      'id': id,
      'email': email,
      'name': name,
      'created_at': DateTime.now().toIso8601String(),
      // –¥–µ—Ñ–æ–ª—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
      'has_seen_intro': _cachedSeenIntro ?? false,
      'archetype': _cachedArchetype,
    });
  }

  String? _extractNameFromMetadata(User user) {
    final meta = user.userMetadata ?? {};
    return (meta['full_name'] ?? meta['name'] ?? meta['given_name']) as String?;
  }

  Future<void> _loadLocalGuestPrefs() async {
    final prefs = await SharedPreferences.getInstance();
    _cachedSeenIntro = prefs.getBool(_prefSeenIntro) ?? false;
    _cachedArchetype = prefs.getString(_prefArchetype);
  }

  /// –ï—Å–ª–∏ –≥–æ—Å—Ç—å —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–ª –¥–æ –ª–æ–≥–∏–Ω–∞ ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –ø—Ä–æ—Ñ–∏–ª—å.
  Future<void> _syncGuestOnLogin() async {
    final id = _currentUserData?['id'];
    if (id == null) return;

    final updates = <String, dynamic>{};
    if ((_currentUserData?['has_seen_intro'] != true) && (_cachedSeenIntro == true)) {
      updates['has_seen_intro'] = true;
    }
    if ((_currentUserData?['archetype'] == null || (_currentUserData?['archetype'] as String?)?.isEmpty == true) &&
        (_cachedArchetype != null && _cachedArchetype!.isNotEmpty)) {
      updates['archetype'] = _cachedArchetype;
    }

    if (updates.isNotEmpty) {
      await _client.from('users').update(updates).eq('id', id);
      _currentUserData = {...?_currentUserData, ...updates};
    }
  }
}
